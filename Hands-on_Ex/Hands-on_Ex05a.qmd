---
title: "Hands-on Exercise 5a: Creating Ternary Plot with R"
author: "Sindy"
date-modified: "last-modified"
execute:
  echo: true
  eval: true
  warning: false
  freeze: true
---

## 1. Overview

Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) Itâ€™s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.

In this hands-on, we will explore ternary plot programmatically using R for visualising and analysing population structure of Singapore.

### 1.1 Installing and loading the required libraries

For this exercise, two main R packages will be used in this hands-on exercise, they are:

-   [**ggtern**](http://www.ggtern.com/), a ggplot extension specially designed to plot ternary diagrams. The package will be used to plot static ternary plots.
-   [**Plotly R**](https://plot.ly/r/), an R package for creating interactive web-based graphs via plotly's JavaScript graphing library, plotly.js . The **plotly R** libary contains the *ggplotly* function, which will convert **ggplot2** figures into a Plotly object.

```{r}
pacman::p_load(plotly, ggtern, tidyverse)
```

### 1.2 Importing data

For the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used.

```{r}
pop_data <- read_csv("data/respopagsex2000to2018_tidy.csv") 
```

### 1.3 Preparing the Data

Next, use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.

```{r}
agpop_mutated <- pop_data %>%
  mutate(`Year` = as.character(Year))%>%
  spread(AG, Population) %>%
  mutate(YOUNG = rowSums(.[4:8]))%>%
  mutate(ACTIVE = rowSums(.[9:16]))  %>%
  mutate(OLD = rowSums(.[17:21])) %>%
  mutate(TOTAL = rowSums(.[22:24])) %>%
  filter(Year == 2018)%>%
  filter(TOTAL > 0)
```

## 2. Plotting Ternary Diagram with R

### 2.1 Plotting a static ternary diagram

Use ***ggtern()*** function of **ggtern** package to create a simple ternary plot.

```{r}
ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +
  geom_point() +
  labs(title="Population structure, 2018") +
  theme_rgbw()
```

### 2.2 Plotting an interative ternary diagram

The code below create an interactive ternary plot using `plot_ly()` function of `Plotly R`.

```{r}
# reusable function for creating annotation object
label <- function(txt) {
  list(
    text = txt, 
    x = 0.1, y = 1,
    ax = 0, ay = 0,
    xref = "paper", yref = "paper", 
    align = "center",
    font = list(family = "serif", size = 15, color = "white"),
    bgcolor = "#b3b3b3", bordercolor = "black", borderwidth = 2
  )
}

# reusable function for axis formatting
axis <- function(txt) {
  list(
    title = txt, tickformat = ".0%", tickfont = list(size = 10)
  )
}

ternaryAxes <- list(
  aaxis = axis("Young"), 
  baxis = axis("Active"), 
  caxis = axis("Old")
)

# Initiating a plotly visualization 
plot_ly(
  agpop_mutated, 
  a = ~YOUNG, 
  b = ~ACTIVE, 
  c = ~OLD, 
  color = I("black"), 
  type = "scatterternary",
  # tooltips: displaying details on the underlying data for each planning area/subzone
  text = ~paste("Total Population:", TOTAL,
                 "<br>Young:", YOUNG,
                 "<br>Active:", ACTIVE,
                 "<br>Old:", OLD),
  hoverinfo = "text"
) %>%
  layout(
    annotations = label("Population Composition"), 
    ternary = ternaryAxes
  )
```

## 3. Reference

Credits to [Prof Kam](https://r4va.netlify.app/chap13).

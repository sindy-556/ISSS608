{
  "hash": "fa2fdc5e4202eef4c97282be9610e69a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods\"\nauthor: \"Sindy\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n\n## 1. Getting started\n\nLoading tidyverse into r environment by using the code chunk below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, psych)\n```\n:::\n\n\n\n\n### 1.1 Importing data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n\n\n### 1.2 About the data\n\n-   Year end examination grades of a cohort of primary 3 students from a local school.\n\n-   There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\n    -   The categorical attributes are: `ID`, `CLASS`, `GENDER` and `RACE`.\n    -   The continuous attributes are: `MATHS`, `ENGLISH` and `SCIENCE`.\n\n## 2. R Graphics VS ggplot\n\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\n::: panel-tabset\n### R Graphics\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(exam_data$MATHS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n### ggplot2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n## 3. Grammar of Graphics\n\nGrammar of Graphics defines the rules of structuring [mathematical and aesthetic]{style=\"color:blue\"} elements into a meaningful graph.\n\nThere are two principles in Grammar of Graphics, they are:\n\n-   Graphics = distinct layers of grammatical elements\n-   Meaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to:\n\n1.  Gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978).\n2.  Provide a strong foundation for understanding a diverse range of graphics.\n3.  Guide us on what a well-formed or correct graphic looks like.\n\n*Note: there will still be many grammatically correct but nonsensical graphics.*\n\n## 4. Essential Grammatical Elements in ggplot2: data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data) # ggplot() initializes a ggplot object.\n# output:A blank canvas\n\n\n# Aesthetic mappings\nggplot(data=exam_data, \n       aes(x= MATHS))\n# output: ggplot that includes the x-axis and the axis’s label.\n```\n:::\n\n\n\n\n## 5. Essential Grammatical Elements in ggplot2: geom\n\nGeometric objects are the actual marks we put on a plot. Examples include:\n\n![](images/image6.png){width=\"80%\"}\n\n-   A plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the **+** operator.\n\n-   For complete list, please refer to [here](https://ggplot2.tidyverse.org/reference/#section-layer-geoms).\n\n### 5.1 Geometric Objects: geom_bar\n\nThe code chunk below plots a bar chart by using geom_bar().\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n### 5.2 Geometric Objects: geom_dotplot\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\nIn the code chunk below, `geom_dotplot()` of ggplot2 is used to plot a dot plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n#### Understanding the parameters:\n\n-   `binwidth`: The default binwidth is 1.\n    -   Each bin will cover an interval of 1 unit on the x-axis.\n    -   For example, if your x-axis represents test scores ranging from 0 to 100, the bins will be \\[0-1), \\[1-2), \\[2-3), ..., \\[99-100).\n    -   `binwidth = 2.5` means that test scores are grouped into intervals of 2.5 units e.g. \\[0-2.5), \\[2.5, 5)...\n-   `scale_y_continuous()` is used to turn off the y-axis.\n    -   The range of y-axis is 0-1 which can can potentially distort the interpretation of the data.\n\n### 5.3 Geometric Objects: geom_histogram\n\nIn the code chunk below, geom_histogram() is used to create a simple histogram by using values in `MATHS` field of `exam_data`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 25)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n\nThe default bin is 30. By setting bins = 25, the number of bins is consistent with the test scores along the x-axis.\n\n### 5.4 Modifying a geometric object by changing geom()\n\nIn the code chunk below,\n\n-   bins argument is used to change the number of bins to 25,\n-   fill argument is used to shade the histogram with light blue color, and\n-   color argument is used to change the outline colour of the bars in black\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")  \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n### 5.5 Modifying a geometric object by changing aes()\n\nThe code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of `aesthetic()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\nThis approach can be used to colour, fill and alpha of the geometric.\n\n### 5.6 Geometric Objects: geom-density()\n\n`geom-density()` computes and plots kernel density estimate, which is a smoothed version of the histogram.\n\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nThe code below plots the distribution of `MATHS` scores in a kernel density estimate plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density() \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n### 5.7 Geometric Objects: geom_boxplot()\n\n`geom_boxplot()` displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.\n\nThe code chunk below plots boxplots by using `geom_boxplot()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\nThe code chunk below plots the distribution of `MATHS` scores by gender in notched plot instead of boxplot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n\n### 5.8 Geometric Objects: geom_violin()\n\n`geom_violin()` is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nThe code below plot the distribution of Maths score by gender in violin plot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n### 5.9 Geometric Objects: geom_point()\n\n`geom_point()` is especially useful for creating scatterplot.\n\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using `geom_point()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n### 5.10 geom objects can be combined\n\nThe code chunk below plots the data points on the boxplots by using both `geom_boxplot()` and `geom_point()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n## 6. Essential Grammatical Elements in ggplot2: stat\n\nThe Statistics functions statistically transform data, usually as some form of summary. For example:\n\n-   frequency of values of a variable (bar graph)\n    -   a mean\n    -   a confidence limit\n-   There are two ways to use these functions:\n    -   add a `stat_()` function and override the default geom, or\n    -   add a `geom_()` function and override the default stat.\n\n### 6.1 Working with stat()\n\nThe boxplots below are incomplete because the positions of the means were not shown.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n### 6.2 Working with stat - the stat_summary() method\n\nThe code chunk below adds mean values by using `stat_summary()` function and overriding the default geom.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun = \"mean\",         \n               colour =\"red\",        \n               size=4)               \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\n### 6.3 Working with stat - the geom() method\n\nThe code chunk below adding mean values by using `geom_()` function and overriding the default stat.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun=\"mean\",           \n             colour=\"red\",          \n             size=4)  \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\nSections 6.2 and 6.3 produce the same output. Both approaches add red points representing the mean values to the boxplots, but these are achieved through slightly different syntax.\n\n### 6.4 Adding a best fit curve on a scatterplot?\n\nThe scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve. In the code chunk below, `geom_smooth()` is used to plot a best fit curve on the scatterplot.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n\n\n*Note: The default method used is loess.*\n\nThe default smoothing method can be overridden as shown below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              linewidth=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\n## 7. Essential Grammatical Elements in ggplot2: facets\n\nFacetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: `facet_grid()` and `facet_wrap()`.\n\n### 7.1 Working with facet_wrap()\n\n`facet_wrap()` wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\n\nThe code chunk below plots a trellis plot using `facet-wrap()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\n### 7.2 facet_grid() function\n\n`facet_grid()` forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\n\nThe code chunk below plots a trellis plot using `facet_grid()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\n## 8. Essential Grammatical Elements in ggplot2: Coordinates\n\nThe **Coordinates functions** map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use. They are:\n\n-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): The default cartesian coordinate system, where you specify x and y values (e.g., allows you to zoom in or out).\n-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): A cartesian system with the x and y axes flipped.\n-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): A cartesian system with a \"fixed\" aspect ratio (e.g., 1.78 for a \"widescreen\" plot).\n-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): A coordinate system that approximates a good aspect ratio for maps.\n\n### 8.1 Working with Coordinate\n\nBy the default, the bar chart of ggplot2 is in vertical form.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n\nThe code chunk below flips the horizontal bar chart into vertical bar chart by using `coord_flip()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\n### 8.2 Changing the y- and x-axis range\n\nThe scatterplot on the below is slightly misleading because the y-aixs and x-axis range are not equal.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n\n#### This is better\n\nThe code chunk below fixed both the y-axis and x-axis range from 0-100.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n\n## 9. Essential Grammatical Elements in ggplot2: themes\n\nThemes control elements of the graph not related to the data. For example:\n\n```         \nbackground colour\nsize of fonts\ngridlines\ncolour of labels\n```\n\nBuilt-in themes include: - `theme_gray()` (default) - `theme_bw()` - `theme_classic()`\n\nA list of theme can be found at this [link.](https://ggplot2.tidyverse.org/reference/ggtheme.html) Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).\n\n::: panel-tabset\n## Default theme\n\nThe code chunk below plot a horizontal bar chart using `theme_gray()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n\n\n## Classic theme\n\nA horizontal bar chart plotted using `theme_classic()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n\n## Minimal theme\n\nA horizontal bar chart plotted using `theme_minimal()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n## 10. Reference\n\nCredits to [Prof Kam](https://r4va.netlify.app/chap01).\n",
    "supporting": [
      "Hands-on_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
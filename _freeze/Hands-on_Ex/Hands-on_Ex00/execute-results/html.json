{
  "hash": "e50808b46453f42e08f8d5e94b91e196",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 0: Working with tidyverse\"\nauthor: \"Sindy\"\ndate-modified: \"last-modified\"\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n---\n\n\n\n## Getting started\n\nLoading tidyverse into r environment by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, psych)\n```\n:::\n\n\n\n## Importing data\n\nThis is an outdated version.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis_csv <- read.csv(\"data/REALIS2019.csv\")\n```\n:::\n\n\n\nCode chunk below uses uses read_csv() of readr to import REALIS2019.csv into r environment as a tibble data.frame.\n\nUse `_` instead of `.` functions to prevent changes made to column names\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2019 <- read_csv(\"data/REALIS2019.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopdata_fat <- read_csv(\"data/PopData2019_fat.csv\")\n```\n:::\n\n\n\n## Pivoting data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#! eval: FALSE\npopdata_long <- popdata_fat %>%\n  pivot_longer(c(3:21),\n               names_to = \"Age Group\",\n               values_to = \"Population\")\n```\n:::\n\n\n\n### More pipes:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#popdata_long <- popdata_fat %>%\n#  pivot_longer(c(3:21),\n#               names_to = \"Age Group\",\n#               values_to = \"Population\") %>%\n#  select(\"Age Group\" == \"5_to_9\")\n\n\n# Filter the dataset for a specific Age Group, e.g., \"0_to_4\"\npopdata_filtered <- popdata_long %>%\n  filter(`Age Group` == \"0_to_4\")\n```\n:::\n\n\n\n## Save data\n\nrds: r native file format - always good to save as rds format\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(popdata_fat, \"data/rds/popdata_fat.rds\")\nwrite_rds(popdata_long, \"data/rds/popdata_long.rds\")\n```\n:::\n\n\n\n`{r, eval=FALSE}`: only display code, does not run the code\n\n`{r, echo=FALSE}`: you run the code in the background, without displaying code\n\n\n\n::: {.cell}\n\n:::\n\n\n\n## Working with dplyr\n\n### Selecting columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2019_selected <- realis2019 %>%\n  select(`Project Name`,\n         `Transacted Price ($)`,\n         `Property Type`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`)\n```\n:::\n\n\n\n### Filtering columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2019_filtered <- realis2019_selected %>%\n  filter(`Property Type` == \"Condominium\" |\n           `Property Type` == \"Apartment\") %>%\n  filter(`Type of Sale` == \"Resale\") %>%\n  filter(`Unit Price ($ psm)` <= 13000)\n```\n:::\n\n\n\n### Combining select and filter with pipe\n\nWe can also combine the above two operations into a single call.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2019_end <- realis2019 %>%\n  select(`Project Name`,\n         `Transacted Price ($)`,\n         `Property Type`,\n         `Type of Sale`,\n         `Unit Price ($ psm)`) %>%\n  filter(`Property Type` == \"Condominium\" |\n           `Property Type` == \"Apartment\") %>%\n  filter(`Type of Sale` == \"Resale\") %>%\n  filter(`Unit Price ($ psm)` <= 13000)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}